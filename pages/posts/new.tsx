import { MainLayout } from '../../src/PageComponents/MainLayout/MainLayout'
import Head from 'next/head'
import { Formik } from 'formik'
import styled from 'styled-components'
import { useDispatch, useSelector } from 'react-redux'
import { useState } from 'react'
import { useRouter } from 'next/router'
import { RootState } from '../../src/state'
import { getLoading, getPostCreated } from '../../src/utils/selectors'
import { createPost } from '../../src/state/thunks'
import { Loader } from '../../src/components/Loader/Loader'

type FormikErrorType = {
  title?: string
  body?: string
}

const CreatePostTitle = styled.h2`
  margin-bottom: 20px;
`

const TitleInput = styled.input`
  width: 100%;
  padding: 5px 15px;
  border: 1px solid grey;
  border-radius: 15px;
  margin-bottom: 20px;
`

const BodyInput = styled.textarea`
  width: 100%;
  padding: 5px 15px;
  border: 1px solid grey;
  border-radius: 15px;
  resize: none;
  margin-bottom: 20px;
  height: 300px;
`

const SubmitButton = styled.button`
  padding: 15px 30px;
  color: black;
  background: grey;
  border: none;
  border-radius: 10px;
  font-weight: bold;
  &:hover {
    cursor: pointer;
    color: white;
    background: black;
  }
`

export default function NewPost() {
  const dispatch = useDispatch()
  const postCreated = useSelector((state: RootState) => getPostCreated(state))
  const isLoading = useSelector((state: RootState) => getLoading(state))
  const router = useRouter()

  if (postCreated) {
    router.push('/')
  }

  return (
    <MainLayout>
      <Head>
        <title>Create new post</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <div>
        {isLoading && <Loader />}
        <CreatePostTitle>Create new post</CreatePostTitle>
        <Formik
          initialValues={{
            title: '',
            body: '',
          }}
          validate={(values) => {
            const errors: FormikErrorType = {}

            if (!values.title) {
              errors.title = 'Title is required!'
            } else if (values.title.length > 30) {
              errors.title = 'Title should be shorter than 30 symbols!'
            }
            if (!values.body) {
              errors.body = 'Body text is required'
            }

            return errors
          }}
          onSubmit={(values) => {
            dispatch(createPost(values.title, values.body))
          }}
        >
          {({
            handleSubmit,
            handleChange,
            handleBlur,
            values,
            errors,
            touched,
          }) => {
            return (
              <form onSubmit={handleSubmit}>
                {errors.title && touched.title && (
                  <span style={{ color: 'red' }}>{errors.title}</span>
                )}
                <TitleInput
                  name="title"
                  placeholder="Put post title here..."
                  onChange={handleChange}
                  onBlur={handleBlur}
                  value={values.title}
                  style={{ borderColor: errors.title && errors.body && 'red' }}
                />
                {errors.body && touched.body && (
                  <span style={{ color: 'red' }}>{errors.body}</span>
                )}
                <BodyInput
                  name="body"
                  placeholder="Put post body here..."
                  onChange={handleChange}
                  onBlur={handleBlur}
                  value={values.body}
                  style={{ borderColor: errors.body && touched.body && 'red' }}
                />
                <SubmitButton type="submit">Create Post</SubmitButton>
              </form>
            )
          }}
        </Formik>
      </div>
    </MainLayout>
  )
}
